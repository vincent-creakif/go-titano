<div class="overflow-x-auto">
    <button class="btn btn-xs btn-outline" @onclick="PreviousYear" disabled=@(_yearOffset == 0)>
        previous
    </button>
    <button class="btn btn-xs btn-outline" @onclick="NextYear">
        next
    </button>

    <table class="table table-compact w-full overflow-y-scroll">
        <thead class="border-b border-gray-50 border-opacity-30">
            <tr class="align-top">
                <th class="align-top">
                    Month
                </th>
                <th>
                    Your Balance
                    <div class="opacity-70 text-xs lowercase font-mono font-normal">
                        (end of the month)
                    </div>
                </th>
                <th>
                    Earnings
                    <div class="opacity-70 text-xs lowercase font-mono font-normal">
                        (upcoming)
                    </div>
                </th>
            </tr>
        </thead>
        <tbody class="divide-y divide-gray-50 divide-opacity-10">
            @{
                var currentYear = 0;
                var forecastDateItems = ForecastItems();

                var weekDays = Items.WeekDays(_weekOffset);
                for (var i = 0; i < forecastDateItems.Count; i++)
                {
                    var forecastDate = forecastDateItems.ElementAt(i);

                    //var yearHasChanged = 0 < currentYear && forecastDate.Date.Year != currentYear;

                    var daysItems = Items.Where(x => x.Day.Year == forecastDate.Year && x.Day.Month == forecastDate.Month);

                    var lastDay = daysItems.Last();
                    var balanceAmountValue = lastDay.BalanceAmountValue;
                    var balanceAmount = lastDay.BalanceAmount;
                    var rebaseAmount = daysItems.Sum(x => x.DailyRebaseAmounts.Sum());
                    var earnings = daysItems.Sum(x => x.DailyRebaseAmountValues.Sum());

                    <tr>
                        <td class="font-mono align-top" width="15%">
                            <div class="badge badge-secondary badge-outline text-xs">
                                @($"{forecastDate.Date.Year}-{forecastDate.Date.Month:00}")
                            </div>
                        </td>
                        <td>
                            <span class="text-accent">$</span><DisplayDecimal Value="balanceAmountValue" />
                            <div class="stat-desc pt-1 font-mono">
                                <DisplayDecimal Value="balanceAmount" Unit="TITANO" />
                            </div>
                        </td>
                        <td>
                            <span class="text-accent">$</span><DisplayDecimal Value="earnings" />
                            <div class="stat-desc pt-1 font-mono">
                                <DisplayDecimal Value="rebaseAmount" Unit="TITANO" />
                            </div>
                        </td>
                    </tr>

                    currentYear = forecastDate.Date.Year;
                }
            }
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter(Name="Items")]
    public IReadOnlyCollection<TitanoForecastItem> Items { get; set; }
    [CascadingParameter(Name="View")]
    public ForecastViewEnum View { get; set; }

    private int _yearOffset;
    private int _weekOffset;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _yearOffset = 0;
            _weekOffset = 0;
        }
    }

    private IReadOnlyCollection<DateTime> ForecastItems()
    {
        return View switch
        {
            ForecastViewEnum.Yearly => Items.Months(_yearOffset),
            ForecastViewEnum.Weekly => Items.WeekDays(_weekOffset),
            _ => null
        };
    }

    private void PreviousYear()
    {
        _yearOffset--;
        StateHasChanged();
    }

    private void NextYear()
    {
        _yearOffset++;
        StateHasChanged();
    }
}
