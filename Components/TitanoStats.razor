@inject IJSRuntime JsRuntime
@inject TitanoService TitanoService

<div class="stats stats-vertical overflow-hidden">
    <div class="stats-logo">
        <img src="/public/img/titano.svg" />
    </div>

    <div class="stat first">
        <div class="stat-title opacity-80">Your balance</div>
        <Display If="State?.Balance is null">
            <span class="btn btn-ghost loading btn-md btn-circle"></span>
        </Display>
        <Display If="State?.Balance is not null">
            <div class="stat-value">
                <div class="dropdown dropdown-hover initial-balance">
                    <label tabindex="0">
                        <DisplayDecimal Value="State.Balance.BalanceAmountValue" CurrencySymbol="@State.CurrencySymbol" />
                    </label>
                </div>
            </div>
            <div class="stat-desc pt-1 font-mono">
                <DisplayDecimal Value="State.Balance?.BalanceAmount" Unit="TITANO" />
            </div>
        </Display>
    </div>

    <div class="stat">
        <div class="stat-title opacity-80">TITANO price</div>
        <Display If="State?.Price is null">
            <span class="btn btn-ghost loading btn-md btn-circle"></span>
        </Display>
        <Display If="State?.Price is not null">
            <div class="stat-value">
                <DisplayDecimal Value="State.Price.In(State.Currency)" StringFormat="N4" CurrencySymbol="@State.CurrencySymbol" />
            </div>
            <div class="stat-desc pt-1 font-mono">
                <DisplayDate Value="State.Price.LastUpdatedAtLocalTime" />
            </div>
        </Display>
    </div>

    <div class="stat">
        <div class="stat-title opacity-80">Rebase earnings</div>
        <Display If="State?.Earnings is null">
            <span class="btn btn-ghost loading btn-md btn-circle"></span>
        </Display>
        <Display If="State?.Earnings is not null">
            <div class="stat-value">
                <DisplayDecimal Value="State.Earnings.RebaseAmountValue" CurrencySymbol="@State.CurrencySymbol" />
            </div>
            <div class="stat-desc pt-1 font-mono">
                <DisplayDecimal Value="State.Earnings.RebaseAmount" Unit="TITANO" />
                <br />
                rebase in
                <Display If="_rebaseCountdownMinutes is not null && _rebaseCountdownSeconds is not null">
                    <span class="countdown">
                        <span class="pr-1" style="--value:@_rebaseCountdownMinutes"></span>m
                        <span class="px-1" style="--value:@_rebaseCountdownSeconds"></span>s
                    </span>
                </Display>
            </div>
        </Display>
    </div>

    <div class="stat">
        <div class="stat-title opacity-80">Daily earnings</div>
        <Display If="State?.Earnings is null">
            <span class="btn btn-ghost loading btn-md btn-circle"></span>
        </Display>
        <Display If="State?.Earnings is not null">
            <div class="stat-value">
                <DisplayDecimal Value="State.Earnings.DailyRebaseAmountValue" CurrencySymbol="@State.CurrencySymbol" />
            </div>
            <div class="stat-desc pt-1 font-mono">
                <DisplayDecimal Value="State.Earnings.DailyRebaseAmount" Unit="TITANO" />
            </div>
        </Display>
    </div>
    
    <Display If="Holders is not null">
        <div class="stat">
            <div class="stat-title opacity-80">Holders</div>
            <Display If="Holders is null">
                <span class="btn btn-ghost loading btn-md btn-circle"></span>
            </Display>
            <Display If="Holders is not null">
                <div class="stat-figure text-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-8 h-8 stroke-current">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                    </svg>
                </div>            
                <div class="stat-value text-primary">
                    <DisplayDecimal Value="Holders.TotalCount" StringFormat="N0"/>
                </div>
                <div class="stat-desc pt-1 font-mono">
                    <DisplayDate Value="Holders.LastUpdatedAtLocalTime"/>
                </div>
            </Display>
        </div>
    </Display>
</div>

@code {
    [CascadingParameter(Name = "State")]
    public State State { get; set; }

    [Parameter]
    public BscScanHoldersModel Holders { get; set; }    
    
    private int? _rebaseCountdownMinutes;
    private int? _rebaseCountdownSeconds;
    
    [JSInvokable]
    public async Task SetRebaseCountdownAsync()
    {
        var rebaseTime = TitanoService.RebaseTime;

        _rebaseCountdownMinutes = (60 - rebaseTime.Minute) % 30;
        _rebaseCountdownSeconds = 60 - rebaseTime.Second;

        if (_rebaseCountdownSeconds == 60)
        {
            _rebaseCountdownSeconds--;
        }

        StateHasChanged();
    }
}
