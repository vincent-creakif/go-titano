<div class="overflow-x-auto">
    <div class="flex flex-wrap pb-5 overflow-hidden">
        <div class="w-2/12">
            <button class="btn btn-sm btn-outline" @onclick="PreviousPage" disabled=@IsPreviousPageDisabled()>
                previous
            </button>
            <button class="btn btn-sm btn-outline" @onclick="NextPage" disabled=@IsNextPageDisabled()>
                next
            </button>
            <span class="pl-3 font-mono text-sm opacity-70">
                @CurrentPage() /  @_pageCount
            </span>
        </div>

        <div class="w-10/12">
            <div class="btn-group opacity-90 flex justify-end">
                @foreach (var forecastView in Enum.GetNames<ForecastViewEnum>())
                {
                    var enumValue = Enum.Parse<ForecastViewEnum>(forecastView);
                    <button class="btn btn-sm @(_forecastView == enumValue ? "btn-info" : "btn-outline")" @onclick="() => ForecastViewChanged(enumValue)">
                        @forecastView
                    </button>
                }
            </div>
        </div>
    </div>

    <table class="table table-compact w-full overflow-y-scroll">
        <thead class="border-b border-gray-50 border-opacity-30">
            <tr class="align-top">
                <th class="align-top">
                    Month
                </th>
                <th>
                    Your Balance
                    <div class="opacity-70 text-xs lowercase font-mono font-normal">
                        (end of the month)
                    </div>
                </th>
                <th>
                    Earnings
                    <div class="opacity-70 text-xs lowercase font-mono font-normal">
                        (upcoming)
                    </div>
                </th>
            </tr>
        </thead>
        <tbody class="divide-y divide-gray-50 divide-opacity-10">
            @{
                var forecastItems = ForecastItems();
                for (var i = 0; i < forecastItems.Count; i++)
                {
                    var forecastDate = forecastItems.ElementAt(i);
                    var daysItems = ForecastDateItems(forecastDate);
                    var day = forecastItems.ElementAt(i);

                    var isFirst = i == 0;
                    var isLast = i == forecastItems.Count - 1;

                    var isToday = i + _weekOffset == 0;
                    var isTomorrow = i + _weekOffset == 1;

                    var isCurrentMonth = i + _yearOffset == 0;

                    var lastDay = daysItems.Last();
                    var balanceAmountValue = lastDay.BalanceAmountValue;
                    var balanceAmount = lastDay.BalanceAmount;
                    var rebaseAmount = daysItems.Sum(x => x.DailyRebaseAmounts.Sum());
                    var earnings = daysItems.Sum(x => x.DailyRebaseAmountValues.Sum());

                    <tr>
                        <td class="font-mono align-top" width="15%">
                            @* Daily *@
                            <Display If="_forecastView == ForecastViewEnum.Weekly">
                                <Display If="_weekOffset == 0">
                                    <span class="text-secondary text-xs">
                                        <Display If="isToday">
                                            <span class="badge badge-accent badge-outline text-xs">
                                                Today
                                            </span>
                                        </Display>
                                        <Display If="isTomorrow">
                                            Tomorrow
                                        </Display>
                                        <Display If="!isToday && !isTomorrow">
                                            <DisplayDate Value="day" StringFormat="dddd" />
                                        </Display>
                                    </span>
                                </Display>
                                <Display If="_weekOffset > 0">
                                    <Display If="isFirst || isLast">
                                        <span class="badge badge-secondary badge-outline text-xs">
                                            <DisplayDate Value="day" StringFormat="yyyy-MM-dd" />
                                        </span>
                                    </Display>
                                    <Display If="!(isFirst || isLast)">
                                        <span class="pl-2 text-secondary text-xs">
                                            <DisplayDate Value="day" StringFormat="yyyy-MM-dd" />
                                        </span>
                                    </Display>
                                </Display>
                            </Display>

                            @* Yearly *@
                            <Display If="_forecastView == ForecastViewEnum.Yearly">
                                <Display If="isFirst || isLast">
                                    <span class="badge @(isCurrentMonth ? "badge-accent" : "badge-secondary") badge-outline text-xs">
                                        @($"{forecastDate.Date.Year}-{forecastDate.Date.Month:00}")
                                    </span>
                                </Display>
                                <Display If="!(isFirst || isLast)">
                                    <span class="pl-2 text-secondary text-xs">
                                        @($"{forecastDate.Date.Year}-{forecastDate.Date.Month:00}")
                                    </span>
                                </Display>
                            </Display>
                        </td>
                        <td width="25%">
                            <span class="text-accent">$</span><DisplayDecimal Value="balanceAmountValue" />
                            <div class="stat-desc pt-1 font-mono">
                                <DisplayDecimal Value="balanceAmount" Unit="TITANO" />
                            </div>
                        </td>
                        <td>
                            <span class="text-accent">$</span><DisplayDecimal Value="earnings" />
                            <div class="stat-desc pt-1 font-mono">
                                <DisplayDecimal Value="rebaseAmount" Unit="TITANO" />
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter(Name = "Items")]
    public IReadOnlyCollection<TitanoForecastItem> Items { get; set; }

    private ForecastViewEnum _forecastView;
    private int _pageCount;
    private int _yearOffset;
    private int _weekOffset;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _pageCount = Items.YearlyPageCount();
            _yearOffset = 0;
            _weekOffset = 0;
            StateHasChanged();
        }
    }

    private IReadOnlyCollection<DateTime> ForecastItems()
    {
        return _forecastView switch
        {
            ForecastViewEnum.Yearly => Items.Months(_yearOffset),
            ForecastViewEnum.Weekly => Items.WeekDays(_weekOffset),
            _ => null
        };
    }

    private IEnumerable<TitanoForecastItem> ForecastDateItems(DateTime forecastDate)
    {
        return _forecastView switch
        {
            ForecastViewEnum.Yearly => Items.Where(x => x.Day.Year == forecastDate.Year && x.Day.Month == forecastDate.Month),
            ForecastViewEnum.Weekly => Items.Where(x => x.Day.Date == forecastDate.Date),
            _ => null
        };
    }

    private void ForecastViewChanged(ForecastViewEnum forecastView)
    {
        _forecastView = forecastView;
        switch (_forecastView)
        {
            case ForecastViewEnum.Yearly:
                _pageCount = Items.YearlyPageCount();
                break;
            case ForecastViewEnum.Weekly:
                _pageCount = Items.WeeklyPageCount();
                break;
        }
    }

    private int CurrentPage()
    {
        return _forecastView switch
        {
            ForecastViewEnum.Yearly => _yearOffset + 1,
            ForecastViewEnum.Weekly => _weekOffset + 1,
            _ => 0
        };
    }

    private void PreviousPage()
    {
        switch (_forecastView)
        {
            case ForecastViewEnum.Yearly:
                _yearOffset--;
                break;
            case ForecastViewEnum.Weekly:
                _weekOffset--;
                break;
        }
        StateHasChanged();
    }

    private void NextPage()
    {
        switch (_forecastView)
        {
            case ForecastViewEnum.Yearly:
                _yearOffset++;
                break;
            case ForecastViewEnum.Weekly:
                _weekOffset++;
                break;
        }
        StateHasChanged();
    }

    private bool IsPreviousPageDisabled()
    {
        return _forecastView switch
        {
            ForecastViewEnum.Yearly => _yearOffset == 0,
            ForecastViewEnum.Weekly => _weekOffset == 0
        };
    }

    private bool IsNextPageDisabled()
    {
        return _forecastView switch
        {
            ForecastViewEnum.Yearly => _yearOffset == _pageCount - 1,
            ForecastViewEnum.Weekly => _weekOffset == _pageCount
        };
    }
}
