@using Microsoft.AspNetCore.Components.Web
@namespace Creakif.GoTitano.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!--
 $$$$$$\                  $$$$$$$$\ $$\   $$\                                   $$\
$$  __$$\                 \__$$  __|\__|  $$ |                                  $$ |
$$ /  \__| $$$$$$\           $$ |   $$\ $$$$$$\    $$$$$$\  $$$$$$$\   $$$$$$\  $$ |
$$ |$$$$\ $$  __$$\          $$ |   $$ |\_$$  _|   \____$$\ $$  __$$\ $$  __$$\ $$ |
$$ |\_$$ |$$ /  $$ |         $$ |   $$ |  $$ |     $$$$$$$ |$$ |  $$ |$$ /  $$ |\__|
$$ |  $$ |$$ |  $$ |         $$ |   $$ |  $$ |$$\ $$  __$$ |$$ |  $$ |$$ |  $$ |
\$$$$$$  |\$$$$$$  |         $$ |   $$ |  \$$$$  |\$$$$$$$ |$$ |  $$ |\$$$$$$  |$$\
 \______/  \______/          \__|   \__|   \____/  \_______|\__|  \__| \______/ \__|
-->
<!DOCTYPE html>
<html lang="en" data-theme="synthwave">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="/public/css/app.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script autostart="false" src="_framework/blazor.server.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.7.1-rc.0/web3.min.js" integrity="sha512-Ui9NE+/XdhwxssTrWetwWgpwpZJCLgTpB2dgkq+xe3O7lmZEJe+2rw3OT3YbYIUCQWH5dOO8ObLOYmbUVpPBgw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/public/js/app.js"></script>

    <script>
        async function connectionDown(options) {
             console.log("Connection Down - you could do some UI here...");
             for (let i = 0; i < options.maxRetries; i++) {
                 console.log("Waiting for reconnect attempt #"+(i+1)+" ...");
                 await this.delay(options.retryIntervalMilliseconds);
                 if (this.isDisposed) {
                     break;
                 }

                 try {
                     // reconnectCallback will asynchronously return:
                     // - true to mean success
                     // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)
                     // - exception to mean we didn't reach the server (this can be sync or async)
                     console.log("Starting Reconnect attempt #"+(i+1)+" ...");
                     const result = await window.Blazor.reconnect();
                     if (!result) {
                         // If the server responded and refused to reconnect, log it
                         console.error("Server Rejected");
                     } else {
                         // Reconnected!
                         return;
                     }
                 } catch (err) {
                     // We got an exception so will try again
                     console.error(err);
                 }
             }
             // all attempts failed - let's try a full reload
             // This could be a UI change instead or something more complicated
             location.reload();
         }

         function delay(durationMilliseconds) {
             return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
         }

         function connectionUp(e) {
             // Reconnected
             console.log("Connection UP!");
             // if you have a UI to hide/change you can do that here.
         }

         window.Blazor.start({
             reconnectionOptions: {
                 maxRetries: 30,
                 retryIntervalMilliseconds: 500,
             },
             reconnectionHandler: {
                 onConnectionDown: e => connectionDown(e),
                 onConnectionUp: e => connectionUp(e)
             }
         });
    </script>
</body>
</html>
