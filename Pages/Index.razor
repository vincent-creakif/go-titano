@page "/"
@inherits RootComponent
@inject BscScanService BscScanService
@inject CoinGeckoService CoinGeckoService
@inject TitanoService TitanoService
@inject IJSRuntime JsRuntime

<PageTitle>Go Titano!</PageTitle>

<CascadingValue Name="State" Value="_state">
    <TopBar InitialBalance="_initialBalance" />

    <div class="w-3/12 p-3 pt-0 flex flex-col">
        <TitanoStats Holders="_titanoHolders" @ref="_titanoStats" />
    </div>

    <div class="w-9/12 p-4">
        <div class="columns-1">
            <div class="flex justify-end">
                <Display If="_connectedWallet is null">
                    <button class="btn btn-sm btn-warning gap-2" @onclick="async() => await ConnectWalletAsync()">
                        <img src="public/img/metamask.svg" width="32" />
                        Connect Wallet
                    </button>
                </Display>
                <Display If="_connectedWallet is not null">
                    <div class="btn-group opacity-90">
                        @foreach (var currency in CurrenciesGroups.CurrenciesAvailable)
                        {
                            <button class="btn btn-sm @(_state?.Currency == currency ? "btn-primary" : "btn-outline")" @onclick="async () => await SetCurrencyAsync(currency)">
                                @currency
                            </button>
                        }
                    </div>

                    <button class="btn btn-sm btn-warning ml-4" @onclick="async() => await DisconnectWalletAsync()">
                        Disconnect
                    </button>
                </Display>
            </div>
        </div>

        <div class="pt-6">
            <TitanoForecast Items="_titanoForecastItems" />
        </div>
    </div>
</CascadingValue>

@code {
    private State _state;

    private TitanoStats _titanoStats;
    private BscScanResultItemModel _initialBalance;
    private BscScanHoldersModel _titanoHolders;
    private IReadOnlyCollection<TitanoForecastItem> _titanoForecastItems;
    private decimal _currentBalanceAmount;
    private string _connectedWallet;
    private string _currentCurrency = Currencies.Usd;

    protected override async Task OnAfterFirstRenderAndParametersSetAsync()
    {
        await ConnectWalletAsync();
    }

    private async Task GetForecastAsync()
    {
        _titanoForecastItems = await TitanoService.GetForecastItemsAsync(
            _state.Price.In(_state.Currency),
            _state.Balances.BalanceAmount);
    }

    private async Task ConnectWalletAsync()
    {
        await JsRuntime.InvokeAsync<string>(
            "connectWalletAsync",
            Wallets.Metamask,
            Coins.Contracts[Coins.Titano],
            DotNetObjectReference.Create(this));

        RefreshState(false);
    }

    [JSInvokable]
    public async Task SetConnectedWalletAsync(string wallet)
    {
        _state = new(_currentCurrency);
        _connectedWallet = wallet;
        RefreshState(false);
    }

    [JSInvokable]
    public async Task DisconnectWalletAsync()
    {
        await JsRuntime.InvokeVoidAsync("resetApp");

        _connectedWallet = null;
        _titanoHolders = null;
        _titanoForecastItems = null;
        _currentBalanceAmount = 0;
        _state.Clear();
        RefreshState(false);
    }

    [JSInvokable]
    public async Task GetTitanoPriceAsync()
    {
        var currentPrice = _state.Price?.In(_state.Currency) ?? 0m;
        _state.Price = await CoinGeckoService.GetTitanoPriceAsync(ct);

        if (_state.Price?.HasChanged(currentPrice, _state.Currency) == true && _state.Balances is not null)
        {
            await GetForecastAsync();
            RefreshState(false);
        }
    }

    [JSInvokable]
    public async Task SetTitanoBalancesAsync(string balance)
    {
        if (_state.Price is not null)
        {
            _state.Balances = TitanoService.GetBalances(
                balance,
                _state.Price.In(_state.Currency));

            if (_state.Balances.HasChanged(_currentBalanceAmount))
            {
                await GetForecastAsync();
                RefreshState(false);
            }

            _currentBalanceAmount = _state.Balances.BalanceAmount;
        }
    }

    [JSInvokable]
    public void GetTitanoEarningsAsync()
    {
        _state.Earnings = TitanoService.GetEarnings(
            _state.Price.In(_state.Currency),
            _state.Balances.BalanceAmount);

        RefreshState(false);
    }

    [JSInvokable]
    public async Task GetTitanoHoldersAsync()
    {
        _titanoHolders = await BscScanService.GetTotalHoldersAsync(
            Coins.Contracts[Coins.Titano],
            ct);

        RefreshState(false);
    }

    [JSInvokable]
    public async Task SetRebaseCountdownAsync()
    {
        if (_titanoStats is not null)
        {
            await _titanoStats.SetRebaseCountdownAsync();
        }
    }

    [JSInvokable]
    public async Task GetInitialBalanceAsync(string walletAddress)
    {
        _initialBalance = await BscScanService.GetInitialBalanceAsync(
            walletAddress,
            Coins.Contracts[Coins.Titano],
            ct);

        StateHasChanged();
    }

    private async Task SetCurrencyAsync(string currency)
    {
        _state.Currency = currency;
        _state.Balances = _state.Balances.WithBalanceAmountValue(_currentBalanceAmount * _state.Price.In(_state.Currency));
        _currentCurrency = currency;

        GetTitanoEarningsAsync();
        await GetForecastAsync();

        RefreshState(false);
    }
}