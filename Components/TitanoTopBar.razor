@inject TimeZoneService TimeZoneService

<div class="topbar w-full font-mono">
    <span class="px-3 bg-neutral rounded-b-xl">
        <Display If="InitialBalance is null || State.Balances is null">
            loading...
        </Display>
        <Display If="InitialBalance is not null && State.Balances is not null">
            <strong>first deposit:</strong> <DisplayDecimal Value="InitialBalance.Value" Unit="TITANO" />
            <div class="tooltip tooltip-bottom" data-tip="@InitialBalance.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")">
                (<span class="opacity-70">@FirstDepositWas()</span>)
            </div>
            <Display If="BalanceIncrease > 0">
                - <strong>increase:</strong> <DisplayDecimal Value="BalanceIncrease" Unit="TITANO" />
                <span class="badge badge-secondary badge-outline font-sans">+@(BalanceIncreasePercentage)%</span>
                <span class="badge badge-accent badge-outline">
                    +<DisplayDecimal Value="BalanceAmountValueIncrease" CurrencySymbol="@State.CurrencySymbol" />
                </span>
            </Display>
        </Display>
    </span>
</div>

@code {
    [CascadingParameter(Name = "State")]
    public State State { get; set; }

    [Parameter]
    public BscScanResultItemModel InitialBalance { get; set; }

    private string FirstDepositWas()
    {
        TimeSpan timeSpan = default;
        var maxUnit = TimeUnit.Day;

        InvokeAsync(async () =>
        {
            var localTime = await TimeZoneService.GetLocalDateTime(DateTime.UtcNow);
            timeSpan = TimeSpan.FromDays((localTime - InitialBalance.CreatedAt).TotalDays);

            if (timeSpan.Days > 40)
            {
                maxUnit = TimeUnit.Month;
            }
        });

        return $"{timeSpan.Humanize(maxUnit: maxUnit, precision: 2)} ago";
    }

    private decimal BalanceIncrease => (State.Balances.BalanceAmount - InitialBalance.Value);
    private decimal? BalanceAmountValueIncrease => BalanceIncrease * State.Price?.In(State.Currency);
    private int BalanceIncreasePercentage => (int)((State.Balances.BalanceAmount / InitialBalance.Value) * 100);
}
