@page "/"
@inherits RootComponent
@inject BscScanService BscScanService
@inject CoinGeckoService CoinGeckoService
@inject TitanoService TitanoService
@inject IJSRuntime JsRuntime

<PageTitle>Go Titano!</PageTitle>

<div class="w-3/12 p-3 pt-0 flex flex-col">
    <Display If="_currency is not null">
        <TitanoStats Price="_titanoPrice"
                     Currency="@_currency"
                     InitialBalance="_initialBalance"
                     Balances="_titanoBalances"
                     Earnings="_titanoEarnings"
                     @ref="_titanoStats"/>
    </Display>
</div>

<div class="w-9/12 p-4">
    <div class="columns-1">
        <div class="text-right">
            <Display If="_connectedWallet is null">
                <button class="btn btn-sm btn-warning gap-2" @onclick="async() => await ConnectWalletAsync()">
                    <img src="public/img/metamask.svg" width="32" />
                    Connect Wallet
                </button>
            </Display>
            <Display If="_connectedWallet is not null">
                <button class="btn btn-sm btn-warning" @onclick="async() => await DisconnectWalletAsync()">
                    Disconnect
                </button>
            </Display>
        </div>
    </div>

    <div class="pt-6">
        <Display If="_titanoPrice is not null && _titanoBalances is not null">
            <CascadingValue Name="Items" Value="_titanoForecastItems">
                <TitanoForecast CurrencySymbol="@Currencies.Symbols[_currency]" />
            </CascadingValue>
        </Display>
    </div>
</div>

@code {
    private TitanoStats _titanoStats;
    private CoinGeckoSimplePriceItemModel _titanoPrice;
    private TitanoBalancesModel _titanoBalances;
    private TitanoEarningsModel _titanoEarnings;
    private BscScanResultItemModel _initialBalance;
    private IReadOnlyCollection<TitanoForecastItem> _titanoForecastItems;    
    private string _connectedWallet;
    private string _currency = Currencies.Usd;

    protected override async Task OnAfterFirstRenderAndParametersSetAsync()
    {
        await ConnectWalletAsync();
    }

    private async Task GetForecastAsync()
    {
        _titanoForecastItems = await TitanoService.GetForecastItems(
            _titanoPrice.In(_currency),
            _titanoBalances.BalanceAmount);
    }

    private async Task ConnectWalletAsync()
    {
        await JsRuntime.InvokeAsync<string>(
            "connectWalletAsync",
            Wallets.Metamask,
            Coins.Contracts[Coins.Titano],
            DotNetObjectReference.Create(this));

        RefreshState(false);
    }

    [JSInvokable]
    public void SetConnectedWalletAsync(string wallet)
    {
        _connectedWallet = wallet;
        RefreshState(false);
    }

    [JSInvokable]
    public async Task DisconnectWalletAsync()
    {
        await JsRuntime.InvokeVoidAsync("resetApp");

        _connectedWallet = null;
        _titanoPrice = null;
        _titanoBalances = null;
        _titanoEarnings = null;
        _titanoForecastItems = null;
        RefreshState(false);
    }

    [JSInvokable]
    public async Task GetTitanoPriceAsync()
    {
        var currentPrice = _titanoPrice?.In(_currency) ?? 0m;
        _titanoPrice = await CoinGeckoService.GetTitanoPriceAsync(ct);

        if (_titanoPrice?.HasChanged(currentPrice, _currency) == true && _titanoBalances is not null)
        {
            await GetForecastAsync();
            RefreshState(false);
        }
    }

    [JSInvokable]
    public async Task SetTitanoBalancesAsync(string balance)
    {
        var currentBalanceAmount = _titanoBalances?.BalanceAmount ?? 0;
        if (_titanoPrice is not null)
        {
            _titanoBalances = TitanoService.GetBalances(
                balance,
                _titanoPrice.In(_currency));

            if (_titanoBalances.HasChanged(currentBalanceAmount))
            {
                await GetForecastAsync();
                RefreshState(false);
            }
        }
    }

    [JSInvokable]
    public void GetTitanoEarningsAsync()
    {
        _titanoEarnings = TitanoService.GetEarnings(
            _titanoPrice.In(_currency),
            _titanoBalances.BalanceAmount);

        RefreshState(false);
    }

    [JSInvokable]
    public async Task SetRebaseCountdownAsync()
    {
        if (_titanoStats is not null)
        {
            await _titanoStats.SetRebaseCountdownAsync();
        }
    }

    [JSInvokable]
    public async Task GetInitialBalanceAsync(string walletAddress)
    {
        _initialBalance = await BscScanService.GetInitialBalanceAsync(walletAddress, ct);
        StateHasChanged();
    }
}