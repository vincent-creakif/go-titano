@page "/"
@inherits RootComponent
@inject LocalStorageService LocalStorageService
@inject BscScanService BscScanService
@inject CoinGeckoService CoinGeckoService
@inject TitanoService TitanoService
@inject IJSRuntime JsRuntime

<PageTitle>Go Titano!</PageTitle>

<Display If="_currentWalletAddress is null && !_checkingWalletAddress">
    <div class="flex flex-col w-full justify-center items-center">
        <img src="/public/img/titano.svg" class="home-logo" />

        <div class="wallet-address card bg-neutral text-neutral-content">
            <div class="card-body items-center text-center">
                <h1 class="card-title pb-3">
                    Go Titano!
                </h1>
                <div class="w-full pb-3">
                    <input type="text"
                           class="input input-primary font-mono w-full"
                           placeholder="Please enter a wallet address"
                           spellcheck="false"
                           @bind="_walletAddress"
                           @bind:event="oninput"
                           @onkeydown="async (e) => await WalletAddressKeyDownAsync(e)"
                           @ref="_walletAddressInput">
                </div>

                <Display If="_walletAddressHistory?.Any() == true">
                    <ul>
                        @foreach (var walletAddress in _walletAddressHistory)
                        {
                            <li class="link link-accent" @onclick="async () => { _walletAddress = walletAddress; await SetWalletAddressAsync(); }">
                                @walletAddress
                            </li>
                        }
                    </ul>
                </Display>

                <div class="card-actions justify-end">
                    <span class="inline-flex btn btn-accent px-6"
                          disabled=@(!_walletAddress.IsWalletAddress())
                          @onclick="async () => await SetWalletAddressAsync()">
                        GO!
                    </span>
                </div>
            </div>
        </div>
    </div>
</Display>

<Display If="_currentWalletAddress is not null">
    <CascadingValue Name="State" Value="_state">
        <Display If="_state?.InitialBalance is not null">
            <TitanoTopBar />
        </Display>

        <div class="w-3/12 p-3 pt-0 flex flex-col">
            <TitanoStats Holders="_titanoHolders" @ref="_titanoStats" />
        </div>

        <div class="w-9/12 p-4">
            <div class="columns-1">
                <div class="flex justify-end">
                    <Display If="_titanoForecastItems is not null">
                        <div class="btn-group opacity-90">
                            @foreach (var currency in CurrenciesGroups.CurrenciesAvailable)
                            {
                                <button class="btn btn-sm @(_state?.Currency == currency ? "btn-primary" : "btn-outline")" @onclick="async () => await SetCurrencyAsync(currency)">
                                    @currency
                                </button>
                            }
                        </div>
                    </Display>

                    <button class="btn btn-sm btn-accent ml-4" @onclick="async () => await UnsetWalletAddressAsync()">
                        @_currentWalletAddress.ShortWalletAddress()
                    </button>
                </div>
            </div>

            <div class="pt-6">
                <TitanoForecast Items="_titanoForecastItems" />
            </div>
        </div>
    </CascadingValue>
</Display>

@code {
    private const string DefaultCurrency = Currencies.Usd;

    private State _state;

    private ElementReference _walletAddressInput;
    private TitanoStats _titanoStats;
    private IReadOnlyCollection<CoinGeckoPriceHistoryItemWithCurrencyModel> _initialPriceHistory;
    private BscScanHoldersModel _titanoHolders;
    private IReadOnlyCollection<TitanoForecastItem> _titanoForecastItems;
    private IList<string> _walletAddressHistory;
    private bool _checkingWalletAddress;
    private string _walletAddress;
    private string _currentWalletAddress;
    private decimal _currentBalanceAmount;
    private string _connectedWallet;
    private string _currentCurrency;

    protected override void OnInitialized()
    {
        _checkingWalletAddress = true;
    }

    protected override async Task OnAfterFirstRenderAndParametersSetAsync()
    {
        _walletAddress = await LocalStorageService.GetWalletAddressAsync(ct);
        if (_walletAddress is not null)
        {
            await SetWalletAddressAsync();
            _checkingWalletAddress = false;
        }
        else
        {
            _checkingWalletAddress = false;
            _walletAddressHistory = await LocalStorageService.GetWalletAddressHistoryAsync(ct);

            RefreshState(false);

            await JsRuntime.InvokeAsync<string>(
                "setFocusOnElementAsync",
                _walletAddressInput);
        }
    }

    private async Task SetWalletAddressAsync()
    {
        await LocalStorageService.StoreWalletAddressAsync(_walletAddress, ct);
        await LocalStorageService.AddWalletAddressToHistoryIfNeededAsync(_walletAddress, ct);

        _currentWalletAddress = _walletAddress;
        _currentCurrency = await LocalStorageService.GetCurrencyAsync(ct) ?? DefaultCurrency;
        _walletAddress = null;

        _state = new(_currentCurrency);

        await JsRuntime.InvokeAsync<string>(
            "initAppAsync",
            DotNetObjectReference.Create(this));

        RefreshState(false);
    }

    private async Task UnsetWalletAddressAsync()
    {
        _currentWalletAddress = null;

        await LocalStorageService.RemoveWalletAddressAsync(ct);

        _state = null;
        _titanoForecastItems = null;
        _currentBalanceAmount = 0m;

        _walletAddressHistory = await LocalStorageService.GetWalletAddressHistoryAsync(ct);

        await JsRuntime.InvokeVoidAsync("resetAppAsync");

        await JsRuntime.InvokeAsync<string>(
            "setFocusOnElementAsync",
            _walletAddressInput);

        RefreshState(false);
    }

    private void GetTitanoEarnings()
    {
        if (_state.Balance is not null)
        {
            _state.Earnings = TitanoService.GetEarnings(
            _state.Price.In(_state.Currency),
            _state.Balance.BalanceAmount);
        }
    }

    private async Task GetForecastAsync()
    {
        _titanoForecastItems = await TitanoService.GetForecastItemsAsync(
            _state.Price.In(_state.Currency),
            _state.Balance.BalanceAmount);
    }

    private async Task SetCurrencyAsync(string currency)
    {
        _state.Currency = currency;
        _state.Balance = _state.Balance.WithBalanceAmountValue(_currentBalanceAmount * _state.Price.In(_state.Currency));
        _currentCurrency = currency;

        await LocalStorageService.StoreCurrencyAsync(currency, ct);

        GetTitanoEarnings();
        await GetForecastAsync();

        RefreshState(false);
    }

    private async Task WalletAddressKeyDownAsync(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && _walletAddress.IsWalletAddress())
        {
            await SetWalletAddressAsync();
        }
    }

    [JSInvokable]
    public async Task GetTitanoBalanceAsync()
    {
        if (_state.Price is not null)
        {
            _state.Balance = TitanoService.GetBalance(
                await BscScanService.GetCurrentBalanceAsync(_currentWalletAddress, Coins.Titano, ct),
                _state.Price.In(_state.Currency));

            if (_state.Balance.HasChanged(_currentBalanceAmount))
            {
                await GetForecastAsync();
                GetTitanoEarnings();
                RefreshState(false);
            }

            _currentBalanceAmount = _state.Balance.BalanceAmount;
        }
    }

    [JSInvokable]
    public async Task GetTitanoPriceAsync()
    {
        var currentPrice = _state.Price?.In(_state.Currency) ?? 0m;
        _state.Price = await CoinGeckoService.GetTitanoPriceAsync(ct);

        if (_state.Price?.HasChanged(currentPrice, _state.Currency) == true && _state.Balance is not null)
        {
            await GetForecastAsync();
            GetTitanoEarnings();
            RefreshState(false);
        }

        await CoinGeckoService.GetMonthlyPriceHistoryAsync(Coins.Titano, ct);
    }

    [JSInvokable]
    public async Task GetTitanoHoldersAsync()
    {
        _titanoHolders = await BscScanService.GetTotalHoldersAsync(
            Coins.Metadata[Coins.Titano].Contract,
            ct);

        RefreshState(false);
    }

    [JSInvokable]
    public async Task SetRebaseCountdownAsync()
    {
        if (_titanoStats is not null)
        {
            await _titanoStats.SetRebaseCountdownAsync();
        }
    }

    [JSInvokable]
    public async Task GetInitialBalanceAsync()
    {
        _state.InitialBalance = await BscScanService.GetInitialBalanceAsync(
            _currentWalletAddress,
            Coins.Metadata[Coins.Titano].Contract,
            ct);

        if (_state.InitialBalance is not null)
        {
            _state.InitialPrices = await CoinGeckoService.GetPriceHistoryValueAsync(
                Coins.Titano,
                _state.InitialBalance.CreatedAt.ToUniversalTime(),
                ct);
        }

        StateHasChanged();
    }
}